// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package database

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createChain = `-- name: CreateChain :one
INSERT INTO chains (name, description) VALUES ($1, $2) RETURNING chain_id, name, description, created_at, updated_at, deleted_at
`

type CreateChainParams struct {
	Name        string
	Description pgtype.Text
}

// chains
func (q *Queries) CreateChain(ctx context.Context, arg CreateChainParams) (Chain, error) {
	row := q.db.QueryRow(ctx, createChain, arg.Name, arg.Description)
	var i Chain
	err := row.Scan(
		&i.ChainID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createGrocery = `-- name: CreateGrocery :one
INSERT INTO groceries 
    (receipt_id, item_id, quantity, price_per_quantity, weight, price_per_lb, total_price, discount_amount, total_paid) 
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9) RETURNING grocery_id, receipt_id, item_id, quantity, price_per_quantity, weight, price_per_lb, total_price, discount_amount, total_paid, created_at, updated_at, deleted_at
`

type CreateGroceryParams struct {
	ReceiptID        int64
	ItemID           int64
	Quantity         pgtype.Int4
	PricePerQuantity pgtype.Numeric
	Weight           pgtype.Numeric
	PricePerLb       pgtype.Numeric
	TotalPrice       pgtype.Numeric
	DiscountAmount   pgtype.Numeric
	TotalPaid        pgtype.Numeric
}

// groceries
func (q *Queries) CreateGrocery(ctx context.Context, arg CreateGroceryParams) (Grocery, error) {
	row := q.db.QueryRow(ctx, createGrocery,
		arg.ReceiptID,
		arg.ItemID,
		arg.Quantity,
		arg.PricePerQuantity,
		arg.Weight,
		arg.PricePerLb,
		arg.TotalPrice,
		arg.DiscountAmount,
		arg.TotalPaid,
	)
	var i Grocery
	err := row.Scan(
		&i.GroceryID,
		&i.ReceiptID,
		&i.ItemID,
		&i.Quantity,
		&i.PricePerQuantity,
		&i.Weight,
		&i.PricePerLb,
		&i.TotalPrice,
		&i.DiscountAmount,
		&i.TotalPaid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createItem = `-- name: CreateItem :one
INSERT INTO items (chain_id, item_number, item_name, item_category, item_description) VALUES ($1, $2, $3, $4, $5) RETURNING item_id, chain_id, item_number, item_name, item_category, item_description, created_at, updated_at, deleted_at
`

type CreateItemParams struct {
	ChainID         int64
	ItemNumber      int32
	ItemName        string
	ItemCategory    pgtype.Text
	ItemDescription pgtype.Text
}

// items
func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (Item, error) {
	row := q.db.QueryRow(ctx, createItem,
		arg.ChainID,
		arg.ItemNumber,
		arg.ItemName,
		arg.ItemCategory,
		arg.ItemDescription,
	)
	var i Item
	err := row.Scan(
		&i.ItemID,
		&i.ChainID,
		&i.ItemNumber,
		&i.ItemName,
		&i.ItemCategory,
		&i.ItemDescription,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createStore = `-- name: CreateStore :one
INSERT INTO stores (chain_id, store_number, street_address, description) VALUES ($1, $2, $3, $4) RETURNING store_id, chain_id, store_number, street_address, description, created_at, updated_at, deleted_at
`

type CreateStoreParams struct {
	ChainID       int64
	StoreNumber   int32
	StreetAddress string
	Description   string
}

// stores
func (q *Queries) CreateStore(ctx context.Context, arg CreateStoreParams) (Store, error) {
	row := q.db.QueryRow(ctx, createStore,
		arg.ChainID,
		arg.StoreNumber,
		arg.StreetAddress,
		arg.Description,
	)
	var i Store
	err := row.Scan(
		&i.StoreID,
		&i.ChainID,
		&i.StoreNumber,
		&i.StreetAddress,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users  (first_name, last_name, username, password) VALUES ($1, $2, $3, $4) RETURNING user_id, first_name, last_name, username, password, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	FirstName string
	LastName  string
	Username  string
	Password  string
}

// users
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.Username,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const createreceipt = `-- name: Createreceipt :one
INSERT INTO receipts (store_id, receipt_number, transaction_date, final_total) VALUES ($1, $2, $3, $4) RETURNING receipt_id, store_id, receipt_number, transaction_date, final_total, created_at, updated_at, deleted_at
`

type CreatereceiptParams struct {
	StoreID         int64
	ReceiptNumber   int64
	TransactionDate time.Time
	FinalTotal      pgtype.Numeric
}

// receipts
func (q *Queries) Createreceipt(ctx context.Context, arg CreatereceiptParams) (Receipt, error) {
	row := q.db.QueryRow(ctx, createreceipt,
		arg.StoreID,
		arg.ReceiptNumber,
		arg.TransactionDate,
		arg.FinalTotal,
	)
	var i Receipt
	err := row.Scan(
		&i.ReceiptID,
		&i.StoreID,
		&i.ReceiptNumber,
		&i.TransactionDate,
		&i.FinalTotal,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteChain = `-- name: DeleteChain :exec
DELETE FROM chains WHERE chain_id = $1
`

func (q *Queries) DeleteChain(ctx context.Context, chainID int64) error {
	_, err := q.db.Exec(ctx, deleteChain, chainID)
	return err
}

const deleteGrocery = `-- name: DeleteGrocery :exec
DELETE FROM groceries WHERE grocery_id = $1
`

func (q *Queries) DeleteGrocery(ctx context.Context, groceryID int64) error {
	_, err := q.db.Exec(ctx, deleteGrocery, groceryID)
	return err
}

const deleteItem = `-- name: DeleteItem :exec
DELETE FROM items WHERE item_id = $1
`

func (q *Queries) DeleteItem(ctx context.Context, itemID int64) error {
	_, err := q.db.Exec(ctx, deleteItem, itemID)
	return err
}

const deleteStore = `-- name: DeleteStore :exec
DELETE FROM stores WHERE store_id = $1
`

func (q *Queries) DeleteStore(ctx context.Context, storeID int64) error {
	_, err := q.db.Exec(ctx, deleteStore, storeID)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE user_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userID int64) error {
	_, err := q.db.Exec(ctx, deleteUser, userID)
	return err
}

const deletereceipt = `-- name: Deletereceipt :exec
DELETE FROM receipts WHERE receipt_id = $1
`

func (q *Queries) Deletereceipt(ctx context.Context, receiptID int64) error {
	_, err := q.db.Exec(ctx, deletereceipt, receiptID)
	return err
}

const getChain = `-- name: GetChain :one
SELECT chain_id, name, description, created_at, updated_at, deleted_at FROM chains WHERE chain_id = $1
`

func (q *Queries) GetChain(ctx context.Context, chainID int64) (Chain, error) {
	row := q.db.QueryRow(ctx, getChain, chainID)
	var i Chain
	err := row.Scan(
		&i.ChainID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getGrocery = `-- name: GetGrocery :one
SELECT grocery_id, receipt_id, item_id, quantity, price_per_quantity, weight, price_per_lb, total_price, discount_amount, total_paid, created_at, updated_at, deleted_at FROM groceries WHERE grocery_id = $1
`

func (q *Queries) GetGrocery(ctx context.Context, groceryID int64) (Grocery, error) {
	row := q.db.QueryRow(ctx, getGrocery, groceryID)
	var i Grocery
	err := row.Scan(
		&i.GroceryID,
		&i.ReceiptID,
		&i.ItemID,
		&i.Quantity,
		&i.PricePerQuantity,
		&i.Weight,
		&i.PricePerLb,
		&i.TotalPrice,
		&i.DiscountAmount,
		&i.TotalPaid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getItem = `-- name: GetItem :one
SELECT item_id, chain_id, item_number, item_name, item_category, item_description, created_at, updated_at, deleted_at FROM items WHERE item_id = $1
`

func (q *Queries) GetItem(ctx context.Context, itemID int64) (Item, error) {
	row := q.db.QueryRow(ctx, getItem, itemID)
	var i Item
	err := row.Scan(
		&i.ItemID,
		&i.ChainID,
		&i.ItemNumber,
		&i.ItemName,
		&i.ItemCategory,
		&i.ItemDescription,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getStore = `-- name: GetStore :one
SELECT store_id, chain_id, store_number, street_address, description, created_at, updated_at, deleted_at FROM stores WHERE store_id = $1
`

func (q *Queries) GetStore(ctx context.Context, storeID int64) (Store, error) {
	row := q.db.QueryRow(ctx, getStore, storeID)
	var i Store
	err := row.Scan(
		&i.StoreID,
		&i.ChainID,
		&i.StoreNumber,
		&i.StreetAddress,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT user_id, first_name, last_name, username, password, created_at, updated_at, deleted_at FROM users WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, userID int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getreceipt = `-- name: Getreceipt :one
SELECT receipt_id, store_id, receipt_number, transaction_date, final_total, created_at, updated_at, deleted_at FROM receipts WHERE receipt_id = $1
`

func (q *Queries) Getreceipt(ctx context.Context, receiptID int64) (Receipt, error) {
	row := q.db.QueryRow(ctx, getreceipt, receiptID)
	var i Receipt
	err := row.Scan(
		&i.ReceiptID,
		&i.StoreID,
		&i.ReceiptNumber,
		&i.TransactionDate,
		&i.FinalTotal,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
